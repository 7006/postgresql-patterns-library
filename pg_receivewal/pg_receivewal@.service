[Unit]
Description=PostgreSQL pg_receivewal service
Documentation=https://www.postgresql.org/docs/current/app-pgreceivewal.html
 
# в случае появления проблем автоматически перезапускаем сервис StartLimitBurst раз в течение StartLimitIntervalSec, потом сервис перезапускаться не будет
# если сервис вручную запускаться не будет, выполните команду `systemctl reset-failed`
StartLimitBurst=180
StartLimitIntervalSec=4000
 
# если сервис PostgreSQL будет запускаться или останавливаться, то этот сервис сделает так же
# After=postgresql-%i.service
# PartOf=postgresql-%i.service
 
# если сервис Patroni (который управляет PostgreSQL) будет запускаться или останавливаться, то этот сервис сделает так же
After=patroni.service
PartOf=patroni.service
 
[Service]
Type=simple
User=postgres
Group=postgres
# если сетевой диск, куда сохраняются WAL файлы, станет временно недоступен, то сервис остановится, поэтому его нужно перезапускать каждые RestartSec секунд
Restart=on-failure
RestartSec=20
# для корректной работы системы резервного копирования внутри папок /mnt/backup_db/{active_full,archive_wal}/ должна быть папка с названием БД
# но в PostgreSQL можно сделать физическую резервную копию только для всего кластера, поэтому папка называется cluster
Environment="ARCHIVE_DIR=/mnt/backup_db/archive_wal/cluster"
 
ExecCondition=echo "pg_receivewal: check PostgreSQL is ready"
ExecCondition=/usr/pgsql-%i/bin/pg_isready -q
 
ExecCondition=echo "pg_receivewal: check .pgpass is correct"
ExecCondition=grep -q -P "\\b(bkp_replicator)\\b" /var/lib/pgsql/.pgpass
 
# архивировать WAL файлы будем только с мастера
ExecCondition=echo "pg_receivewal: check PostgreSQL is primary"
ExecCondition=/bin/bash -c "test f = $(/usr/pgsql-%i/bin/psql --user=bkp_replicator --no-password --dbname=postgres --quiet --no-psqlrc --pset=null=¤ --tuples-only --no-align --command='select pg_is_in_recovery()')"
 
# создаём папки, если их ещё не было
ExecStartPre=mkdir -p ${ARCHIVE_DIR}
ExecStartPre=chmod 700 ${ARCHIVE_DIR}
 
# удаляем *.partial файл, т.к. WAL файл на СУБД может уже отсутствовать и pg_receivewal вернёт ошибку:
# "unexpected termination of replication stream: ERROR:  requested WAL segment 0000000B000041000000AC has already been removed"
ExecStartPre=/bin/bash -c "rm -f ${ARCHIVE_DIR}/*{partial,history}*"
 
# создаём слот, если его ещё не было (select * from pg_replication_slots;)
ExecStartPre=/usr/pgsql-%i/bin/pg_receivewal --user=bkp_replicator --no-password --no-loop --slot=pg_receivewal --create-slot --if-not-exists
 
# архивируем WAL файлы в реальном времени, появится ещё одна асинхронная реплика, которая никогда не догонит мастер (select * from pg_stat_replication;)
ExecStart=/usr/pgsql-%i/bin/pg_receivewal --user=bkp_replicator --no-password --no-loop --slot=pg_receivewal \
                                          --directory=${ARCHIVE_DIR} --synchronous --compress=9
 
ExecStopPost=echo "pg_receivewal: check PostgreSQL is ready"
ExecStopPost=/usr/pgsql-%i/bin/pg_isready -q
 
# удаляем слот репликации, если он существует и неактивен (не используется)
# активный слот удалить нельзя, будет ошибка; слоты на синхронной реплике, которые есть на мастере, тоже удалить нельзя
ExecStopPost=echo "pg_receivewal: drop unused replication slot"
ExecStopPost=/usr/pgsql-%i/bin/psql --user=bkp_replicator --no-password --dbname=postgres --quiet --no-psqlrc --pset=null=¤ --tuples-only --no-align \
                                    --command="select pg_drop_replication_slot(slot_name) from pg_replication_slots where slot_name='pg_receivewal' and not active"
 
[Install]
WantedBy=multi-user.target
