-- Last version and documentation: https://github.com/rin-nas/postgresql-patterns-library/tree/master/psqlrc

-- Hide confirmation messages
-- \set QUIET on

-- Colors: https://misc.flogisoft.com/bash/tip_colors_and_formatting
-- Colors: https://en.wikipedia.org/wiki/ANSI_escape_code#3-bit_and_4-bit
\set red     '\033[1;31m'
\set green   '\033[0;32m'
\set yellow  '\033[38;5;220m'
\set blue    '\033[38;5;39m'
\set orange  '\033[38;5;214m'
\set magenta '\033[0;35m'
\set cyan    '\033[0;36m'
\set gray    '\033[0;37m'
\set white   '\033[1;37m'
\set reset   '\033[0m'

\set ON_ERROR_STOP on
\set ON_ERROR_ROLLBACK interactive

\set HISTFILE ~/.psql_history.:DBNAME
\set HISTSIZE 9000

-- If a command is run more than once in a row, only store it once in the history.
\set HISTCONTROL ignoredups

-- It's 21st century, let's use unicode for borders
\pset linestyle unicode
--\pset unicode_border_linestyle single
--\pset unicode_column_linestyle single
--\pset unicode_header_linestyle double

-- NULL replacement. See alternatives at https://symbl.cc/en/search/?q=null
\pset null 'Â¤'

\pset pager always
\pset expanded auto
\setenv PAGER 'less -iMFXSx4R'

\set whoami 'SELECT current_user, session_user;'

with fs as (
    select distinct on (name) *
    from pg_file_settings --TODO: non postgres user can throw "ERROR: permission denied for view pg_file_settings"
    order by name, seqno desc
)
select -- pg_backend_pid(), -- if we're connecting through pgbouncer, then prompt's %p is not real, so get real PID

       pg_is_in_recovery(), -- primary or standby
       current_schema(),

       pg_postmaster_start_time()::timestamptz(0) as started_at,
       pg_conf_load_time()::timestamptz(0)        as loaded_at,
       now()::timestamptz(0) - pg_postmaster_start_time()::timestamptz(0) as start_uptime,
       now()::timestamptz(0) - pg_conf_load_time()::timestamptz(0)        as load_uptime,

       current_setting('server_version') as server_version,
       current_setting('config_file') as config_file,
       current_setting('hba_file') as hba_file,

       (select count(*) from pg_stat_replication where state = 'streaming') as streaming_count,

       coalesce((select case when sender_host ~ '^\d+\.\d+\.\d+\.\d+$' then sender_host
                             else split_part(sender_host, '.', 1)
                        end
                 from pg_stat_wal_receiver
                 limit 1), '***LOST***') as primary_dsn,

       coalesce(nullif(concat(
           nullif(extract(day    from r.lag), 0) || 'd',
           nullif(extract(hour   from r.lag), 0) || 'h',
           nullif(extract(minute from r.lag), 0) || 'm',
           case when e.lag_epoch <    1.0 then round(extract(second from r.lag)::numeric * 1000, 0) || 'ms'
                when e.lag_epoch <   10.0 then round(extract(second from r.lag)::numeric, 2) || 's'
                when e.lag_epoch <   60.0 then round(extract(second from r.lag)::numeric, 1) || 's'
                when e.lag_epoch < 3600.0 then round(extract(second from r.lag)::numeric, 0) || 's'
           end
       ), ''), '?') as replication_lag,

       exists(
           select
           from fs
           join pg_settings as s on lower(fs.name) = lower(s.name)
           where not fs.applied and not s.pending_restart
       ) as is_config_file_error,

       exists(select from pg_hba_file_rules where error is not null) as is_hba_file_error,

       exists(select
              from pg_settings as s
              where s.pending_restart
                --and lower(s.setting) is distinct from '(disabled)'
       ) as is_pending_restart,

       exists(
           select
           from fs
           cross join current_setting(fs.name) as cs(setting)
           join pg_settings as s on lower(fs.name) = lower(s.name)
                                and lower(fs.setting) is distinct from lower(cs.setting)
                                and lower(fs.setting) is distinct from lower(s.setting)
                                and not (s.setting = 'replica' and fs.setting = 'hot_standby')
                                and lower(s.setting) is distinct from '(disabled)'
                                and fs.applied and not s.pending_restart
       ) as is_pending_reload,

       exists(
           select
           from fs
           cross join current_setting(fs.name) as cs(setting)
           join pg_settings as s on lower(fs.name) = lower(s.name)
                                and lower(fs.setting) is distinct from lower(cs.setting)
                                and lower(fs.setting) is distinct from lower(s.setting)
                                and fs.applied
                                and case s.vartype
                                      when 'enum'    then  fs.setting != all (s.enumvals) and not (s.setting = 'replica' and fs.setting = 'hot_standby')
                                      --when 'integer' then fs.setting::int not between s.min_val::int and s.max_val::int
                                      --when 'real'    then fs.setting::real not between s.min_val::real and s.max_val::real
                                      else false
                                    end
       ) as is_config_file_setting_incorrect,
	   
       rs.*

from coalesce(
         case when not pg_is_in_recovery() then null -- not standby
              when not exists(select from pg_stat_wal_receiver where status = 'streaming') then null -- primary lost
              when pg_last_wal_receive_lsn() = pg_last_wal_replay_lsn() then '0'::interval -- no lag
              else coalesce(now() - pg_last_xact_replay_timestamp(), '0'::interval)
         end
     ) as r(lag)

cross join extract(epoch from r.lag) as e(lag_epoch)
	 
cross join (select count(*)                    as unused_repl_slots_count,
                   string_agg(slot_name, ', ') as unused_repl_slots_names
            from pg_replication_slots 
            where not active
           ) as rs
\gset

\echo :white'Started at:       ':started_at' (':start_uptime' ago)':reset
\echo :white'Config loaded at: ':loaded_at' (':load_uptime' ago)':reset

\if :pg_is_in_recovery
    \echo :white'Role:             ':magenta'standby':reset' (lag ':replication_lag' from ':primary_dsn')'
\else
    \echo :white'Role:             ':red'primary':reset' (':streaming_count' standby streaming)'
\endif

\if :is_config_file_error
    \echo :red'Errors found in config file "':config_file'"':reset

    with fs as (
        select distinct on (name) *
        from pg_file_settings
        order by name, seqno desc
    )
    select fs.sourcefile, fs.sourceline, fs.name, fs.setting, fs.applied, fs.error,
           s.vartype, s.min_val, s.max_val, s.enumvals, s.extra_desc
    from fs
    join pg_settings as s on lower(fs.name) = lower(s.name)
    where not fs.applied and not s.pending_restart
    order by fs.sourcefile, fs.sourceline;
\endif

\if :is_hba_file_error
    \echo :red'Errors found in hba file "':hba_file'"':reset

    select * 
    from pg_hba_file_rules 
    where error is not null
    order by line_number;
\endif

\if :is_pending_restart
    \echo :orange'Server is pending to restart!':reset

    with fs as (
       select distinct on (name) *
       from pg_file_settings
       order by name, seqno desc
    )
    select fs.sourcefile, fs.sourceline,
           s.vartype, fs.name,
           cs.setting as current_setting,
           fs.setting as tobe_setting
    from fs
    cross join current_setting(fs.name) as cs(setting)
    join pg_settings as s on lower(fs.name) = lower(s.name)
                         and lower(fs.setting) is distinct from lower(cs.setting)
                         and lower(fs.setting) is distinct from lower(s.setting)
                         --and lower(s.setting) is distinct from '(disabled)'
                         and s.pending_restart
    order by fs.sourcefile, fs.sourceline;
\endif

\if :is_pending_reload
    \echo :yellow'Server is pending to reload!':reset
    \echo :yellow'Hint: use command: select pg_reload_conf();':reset


    with fs as (
       select distinct on (name) *
       from pg_file_settings
       order by name, seqno desc
    )
    select fs.sourcefile, fs.sourceline,
           s.vartype, fs.name,
           cs.setting as current_setting,
           fs.setting as tobe_setting
    from fs
    cross join current_setting(fs.name) as cs(setting)
    join pg_settings as s on lower(fs.name) = lower(s.name)
                         and lower(fs.setting) is distinct from lower(cs.setting)
                         and lower(fs.setting) is distinct from lower(s.setting)
                         and not (s.setting = 'replica' and fs.setting = 'hot_standby')
                         and lower(s.setting) is distinct from '(disabled)'
                         and fs.applied and not s.pending_restart
    order by fs.sourcefile, fs.sourceline;
\endif

\if :is_config_file_setting_incorrect
    \echo :red'Incorrect tobe setting found in config file "':config_file'"':reset

    with fs as (
       select distinct on (name) *
       from pg_file_settings
       order by name, seqno desc
    )
    select fs.sourcefile, fs.sourceline, 
           fs.name, s.vartype,
           cs.setting as current_setting,
           fs.setting as tobe_setting,
           s.enumvals, s.min_val, s.max_val
    from fs
    cross join current_setting(fs.name) as cs(setting)
    join pg_settings as s on lower(fs.name) = lower(s.name)
                         and lower(fs.setting) is distinct from lower(cs.setting)
                         and lower(fs.setting) is distinct from lower(s.setting)
                         and fs.applied
                         and case s.vartype
                               when 'enum'    then fs.setting != all (s.enumvals) and not (s.setting = 'replica' and fs.setting = 'hot_standby')
                               --when 'integer' then fs.setting::int not between s.min_val::int and s.max_val::int
                               --when 'real'    then fs.setting::real not between s.min_val::real and s.max_val::real
                               else false
                             end
    order by fs.sourcefile, fs.sourceline;
\endif

\if :unused_repl_slots_count
    \echo :yellow'Server has ':unused_repl_slots_count' unused (inactive) replication slots: ':unused_repl_slots_names'!':reset
    \echo :yellow'Hint: WAL files are increasing, you can delete slots by command: select pg_drop_replication_slot({slot_name});':reset
\endif

/* psql escape codes:
%M - full host + domain for db server, or [local] (if over Unix socket), or [local:/dir/name]
%m - host name of the db server, truncated at the first dot, or [local] (if over Unix socket) -- do not use %m, because IP will be truncated!
%> - port where db server is listening
%n - database session user name (changes based on SET SESSION AUTHORIZATION)
%/ - current database name
%~ - like %/ but the output is ~ if the database is the default
%# - # if user is superuser, else > (changes based on SET SESSION AUTHORIZATION)
%R - in prompt 1: = (normal), ^ (single-line mode), ! (disconnected)
%R - in prompt 2: - (more input expected), * (in a comment), ' or " or $ (inside a string)
%x - Transaction status: an empty string when not in a transaction block, or * when in a transaction block, or ! when in a failed transaction block, or ? when the transaction state is indeterminate (for example, because there is no connection).
*/

\set PROMPT1 '\n':cyan'%`date --rfc-3339=seconds`'
\set PROMPT1 :PROMPT1' ':reset'PostgreSQL ':server_version

\if :pg_is_in_recovery
    \set PROMPT1 :PROMPT1' ':magenta'standby':reset
\else
    \set PROMPT1 :PROMPT1' ':red'primary':reset
\endif

\set PROMPT1 :PROMPT1' ':yellow'%n':cyan'@':orange'%M':cyan':':green'%>':blue'/%/.':current_schema
\set PROMPT1 :PROMPT1'\n':reset'%x%# '

\set PROMPT2 ''

\if `command -v pspg &> /dev/null && echo 1 || echo 0`
    \echo '"pspg" pager is used'
    \pset expanded off
    \setenv PAGER 'pspg --reprint-on-exit --blackwhite'
\else
    \echo :white'Using alternative psql pager called "pspg" is highly recommended (but not required): https://github.com/okbob/pspg':reset
\endif

-- Show query execution time
\timing on

-- Stop hiding confirmation messages
-- \set QUIET off
